This program was intended to do the following:
Given a language and axioms, it finds one of the models of the given axioms.

When you run this program, you will have to type in some informations (e.g., language,
axioms, etc.). This manual will show you how to do that.











Number of sorts. Sometimes one wishes to use many-sorted language. For example, axioms of
vector spaces can be written more conveniently when written in a two-sorted language (one
sort for scalars, the other for vectors). You should type in the number of sorts in your
language. Typically, this is 1.











Cardinality of the universe of sort i. You should fix the cardinality of the universe. For
example, assuming that the number of sorts is 1, if you put 4 for the cardinality, this
program will only find the structure whose universe has a cardinality of 4. You can't put
an infinite cardinality.











A signature and its sort. You should write a signature and its sort. Here is an example for
a language of group axioms:

A signature and its sort: 
0 1
A signature and its sort: 
a 1
A signature and its sort: 
b 1
A signature and its sort: 
c 1
A signature and its sort: 
+ 1 1 1
A signature and its sort: 
- 1 1
A signature and its sort: 
= 1 1 0

This language has signatures 0, a, b, c, +, -, =. You should also specify their sorts.
Sentence symbols (if any) have sort 0. Here we make no distinction between constant and
variable symbols. We will just call them constant symbols. Constant symbols which is not a
sentence symbol have sort 1 to n, where n is the number of sorts. Function symbol's sort is
defined as follows: if f is a function symbol that takes (a1, ..., ai), where ak is a
constant symbol of sort sk, and if f a1 ... ai can be regarded as sort s, then f's sort is
(s1, ..., si, s). Predicate symbol's sort is defined in a similar way, except for that the
last entry of its sort should be 0. If you want, you can also include connectives as
signatures. Connectives are the ones having sorts of (0, 0), (0, 0, 0), (0, 0, 0, 0), etc.
But the connectives "not", "imply", "and", "or" are all given in the program, so you don't
have to type those in. Also, the quantifier "all" is also given.

The following strings should NOT be used as a signature: "not", "imply", "and", "or", "all".
Also, a signature Should NOT be an empty string, and it should NOT contain the string "sor".

Type in "done" when you have typed in all the signatures you will use.











A signature that represents equal. If there is an equal in your language, its meaning is
always fixed. So the program needs to know whether there is an equal in your language, and
if so, what the equal is. Type in the signature that represents an equal. If there is no
such signature, then just press enter without typing anything.











Axioms. You should write axioms. All axioms should be a well-formed formula in PREFIX
notations. For example, the following is the axioms of groups.

Axiom: 
all a all b all c = + + a b c + a + b c    # associativity
Axiom: 
all a and = + a 0 a = + 0 a a    # identity
Axiom: 
all a and = + a - a 0 = + - a a 0    # inverse

Note that the quantifier "all" (representing "for all"), and the connectives "not", "imply",
"and", "or" are all predefined (You don't have to type these in when you type in the
signatures). There is no existential quantifier. So if you want to write a formula that
contains an existential quantifier, you should change it to an equivalent formula that does
not contain an existential quantifier.

Type in "done" when you have put all the axioms.











Epochs. You should specify epochs (the number of times that the training will be repeated).
If the number of sort is 1 and its cardinality is 2 or 3, a moderate epoch is around 100.
If the number of sort is 1 and its cardinality is 6, a moderate epoch is around 500.











Results. After the training, the results will apper. For example, let's suppose that we got
the following.

not:
[1 0]

and:
[[0 1]
 [1 1]]

or:
[[0 0]
 [0 1]]

imply:
[[0 1]
 [0 0]]

0:
2

+:
[[2 2 2]
 [2 2 2]
 [2 2 2]]

-:
[2 2 0]

=:
[[0 1 1]
 [1 0 1]
 [1 1 0]]

--------------------------------------------------
Axiom 1: 1.0
Axiom 2: 0.3333333333333333
Axiom 3: 1.0



Let's interpret these results. You can ignore the results related to connectives.

0:
2

means that in the structure the program found, 0 is the second element of the universe.

+:
[[2 2 2]
 [2 2 2]
 [2 2 2]]

means that in the structure, (the ith element) + (the jth element) = ((i, j)th entry of
the given result). Note that this example doesn't satisfy the group axioms (the structure
does not get trained perfectly).

-:
[2 2 0]

means that in the structure, - (the ith element) = (ith entry of the given result).

=:
[[0 1 1]
 [1 0 1]
 [1 1 0]]

means that, (the ith element) = (the jth element) if and only if ((i, j)th element of the
given result) = 0.

Axiom 1: 1.0
Axiom 2: 0.3333333333333333
Axiom 3: 1.0

shows the rates at which the structure satisfies the given axioms. In this example, the
structure satisfies axiom 1 (associativity) and axiom 3 (inverse) perfectly (as you can
check), but satisfies axiom 2 (identity) only by 33 %.